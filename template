#include <bits/stdc++.h>
using namespace std;
typedef pair<int, int> P;
typedef long long int LL;
typedef long double LD;

const int MAXN = 20;
const int MAXT = 20;

int main() {
	ios::sync_with_stdio(0);
	cin.tie(0);

//	ifstream in("input.txt");
//	cin.rdbuf(in.rdbuf());

	int T, res[MAXT];
	memset(res, 0, sizeof(res));
	cin >> T;
	for (int t = 0; t < T; t++) {

	}

	for (int i = 0; i < T; i++) cout << "Case #" << i+1 << ": " << res[i] << endl;
	return 0;
}


//-----------
#include <bits/stdc++.h>
using namespace std;
typedef long long int LL;
typedef long double LD;
typedef pair<int, int> P;

const int MOD = 1e9 + 7;
const int INF = 1 << 30;

int main() {
	ios::sync_with_stdio(0);
	cin.tie(0);

	return 0;
}

//---------

const int MAXN = 1e5 * 2;
LL NPN[MAXN];

LL _pow(LL a, LL k) {
	LL res = 1;
	while (k) {
		// k%1 == 1
		if (k & 1) res = res * a % MOD;
		a = a * a % MOD;
		// k /= 2;
		k >>= 1;
	}
	return res;
}

LL nPn(int n) {
	if (NPN[n] > 0) return NPN[n];
	if (n == 0) return NPN[n] = 1;
	return NPN[n] = n * nPn(n-1) % MOD;
}

LL nCr(int n, int r) {
	// /= A  ->  *= A^M-2
	return nPn(n) * _pow(nPn(n-r) * nPn(r) % MOD, MOD - 2) % MOD;
}

LL route(int h1, int w1, int h2, int w2) {
	return nCr((h2 - h1) + (w2 - w1), (h2 - h1));
}

------
boost::multiprecision::cpp_int L, R;

------
class UF {
private:
	vector<int> par, rank;

public:
	UF(int n) {
		par.resize(n);
		rank.resize(n);
		for (int i = 0; i < n; i++) {
			par[i] = i;
			rank[i] = 0;
		}
	}
	
	int find(int x) {
		if (par[x] == x) return x;
		return par[x] = find(par[x]);
	}
	
	void unite(int x, int y) {
		x = find(x), y = find(y);
		if (x == y) return;
		if (rank[x] < rank[y]) {
			par[x] = y;
		} else {
			par[y] = x;
			if (rank[x] == rank[y]) rank[x]++;
		}
	}
	
	bool same(int x, int y) {
		return find(x) == find(y);
	}
};

int main() {
	UF uf(10);
	uf.unit(1,2);
	uf.unit(2,3);
	cout << uf.find(3) << endl;
	return 0;
}


-------
typedef struct TrieNode {
	TrieNode *c[26];
	int cnt;
	bool isLeaf;
} TN;

TN *getNode() {
	TN *d;
	d = (TN *)malloc(sizeof(TN));
	for (int i = 0; i < 26; i++) d->c[i] = NULL;
	d->cnt = 0;
	d->isLeaf = false;
	return d;
}

void insert(TN *root, string s) {
	TN *p = root;
	p->cnt++;
	for (int i = 0; i < s.length(); i++) {
		int idx = s[i] - 'a';
		if (!p->c[idx]) p->c[idx] = getNode();
		p = p->c[idx];
		p->cnt++;
	}
	p->isLeaf = true;
}

int main() {
	TN *d = getNode();
}
-------
// http://pheromone.hatenablog.com/entry/2016/01/31/175131
#include <bits/stdc++.h>
using namespace std;
typedef long long int LL;

const int MAXN = 1e6;
const int MOD = 1e9+7;

// 各値間の２乗和をO(N)で求める
int calc(vector<int> v) {
	int ans = 0;
	LL sum1 = v[0], sum2 = LL(v[0])*LL(v[0])%MOD;
	for (int i = 1; i < v.size(); i++) {
		ans = ((LL)ans + LL(i) * LL(v[i]) * LL(v[i]) - 2LL * LL(v[i]) * sum1 + sum2) % MOD;
		ans = (ans + MOD) % MOD;
		sum1 = (sum1 + v[i]) % MOD;
		sum2 = (sum2 + LL(v[i])*LL(v[i])) % MOD;
	}
	return ans;
}

int main() {
	vector<LL> v;
	for (int i = 1; i <= MAXN; i++) v.push_back(i*2);

	cout << calc(v) << endl;

	return 0;
}

-------
// Greatest Common Divisor (Euclidean Algorithm)
int gcd(int a, int b) {
	if (b == 0) return a;
	return gcd(b, a%b);
}

-------
// BIT (Binary indexed tree)
int bit[MAXN];

int sum(int i) {
	int s = 0;
	while (i > 0) {
		s += bit[i];
		i -= i&-i; // i&-i => last bit which is 1.  0110&1010=0010
	}
	return s;
}

void add(int i, int x) {
	while(i <= MAXN) {
		bit[i] += x;
		i += i&-i; // i&-i => last bit which is 1.
	}
}
// BIT : end
